// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const completeTodo = `-- name: CompleteTodo :one
update todos
set completed = 1,
completed_at = datetime('now', 'localtime')
where id = ?
returning id, title, description, created_at, completed, completed_at
`

func (q *Queries) CompleteTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, completeTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Completed,
		&i.CompletedAt,
	)
	return i, err
}

const countTodos = `-- name: CountTodos :one
select count(*) from todos
`

func (q *Queries) CountTodos(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTodos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodo = `-- name: CreateTodo :one
insert into todos (title, description)
values (?, ?)
returning id, title, description, created_at, completed, completed_at
`

type CreateTodoParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Title, arg.Description)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Completed,
		&i.CompletedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
delete from todos
where id = ?
returning id, title, description, created_at, completed, completed_at
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, deleteTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Completed,
		&i.CompletedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
select id, title, description, created_at, completed, completed_at from todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.Completed,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosById = `-- name: GetTodosById :one
select id, title, description, created_at, completed, completed_at from todos where id = ?
`

func (q *Queries) GetTodosById(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodosById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Completed,
		&i.CompletedAt,
	)
	return i, err
}

const uncompleteTodo = `-- name: UncompleteTodo :one
update todos
set completed = 0,
completed_at = null
where id = ?
returning id, title, description, created_at, completed, completed_at
`

func (q *Queries) UncompleteTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, uncompleteTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Completed,
		&i.CompletedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
update todos
set title = ?,
description = ?
where id = ?
returning id, title, description, created_at, completed, completed_at
`

type UpdateTodoParams struct {
	Title       string
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Title, arg.Description, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Completed,
		&i.CompletedAt,
	)
	return i, err
}
